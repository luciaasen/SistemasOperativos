\hypertarget{ejercicio6_8c}{}\section{ejercicio6.\+c File Reference}
\label{ejercicio6_8c}\index{ejercicio6.\+c@{ejercicio6.\+c}}


fichero que contiene ej6 de la practica 3 de S\+O\+P\+ER para el problema productor consumidor  


{\ttfamily \#include $<$sys/ipc.\+h$>$}\\*
{\ttfamily \#include $<$sys/shm.\+h$>$}\\*
{\ttfamily \#include $<$sys/types.\+h$>$}\\*
{\ttfamily \#include $<$sys/wait.\+h$>$}\\*
{\ttfamily \#include $<$unistd.\+h$>$}\\*
{\ttfamily \#include $<$stdio.\+h$>$}\\*
{\ttfamily \#include $<$stdlib.\+h$>$}\\*
{\ttfamily \#include $<$errno.\+h$>$}\\*
{\ttfamily \#include $<$string.\+h$>$}\\*
{\ttfamily \#include \char`\"{}semaforos.\+h\char`\"{}}\\*
Include dependency graph for ejercicio6.\+c\+:
% FIG 0
\subsection*{Classes}
\begin{DoxyCompactItemize}
\item 
struct \hyperlink{structAlphaStack}{Alpha\+Stack}
\end{DoxyCompactItemize}
\subsection*{Macros}
\begin{DoxyCompactItemize}
\item 
\#define {\bfseries K\+EY}~14327876\hypertarget{ejercicio6_8c_a8ae9d53f33f46cfcfcb9736e6351452a}{}\label{ejercicio6_8c_a8ae9d53f33f46cfcfcb9736e6351452a}

\item 
\#define {\bfseries F\+I\+L\+E\+K\+EY}~\char`\"{}/\char`\"{}\hypertarget{ejercicio6_8c_a68c15c5fb7f7c6f707903e6a46ab0557}{}\label{ejercicio6_8c_a68c15c5fb7f7c6f707903e6a46ab0557}

\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
int \hyperlink{ejercicio6_8c_a3c04138a5bfe5d72780bb7e82a18e627}{main} (int argc, char $\ast$$\ast$argv)
\item 
int \hyperlink{ejercicio6_8c_ad25a83427215d376e79b326a4a5588ea}{crear\+\_\+shmem} (char $\ast$filekey, int key, int size, \hyperlink{structAlphaStack}{Alpha\+Stack} $\ast$$\ast$att)
\item 
int \hyperlink{ejercicio6_8c_a2cc0837ae3ca446fb9b2ba73718c8fc9}{crear\+\_\+sems} (char $\ast$filekey, int $\ast$mutex, int $\ast$lleno, int $\ast$vacio)
\item 
int \hyperlink{ejercicio6_8c_acc4da934b99f2d1954f65e8a5ca87223}{productor} (\hyperlink{structAlphaStack}{Alpha\+Stack} $\ast$alpha, int $\ast$mutex, int $\ast$lleno, int $\ast$vacio, int prod\+Sleep)
\item 
int \hyperlink{ejercicio6_8c_a9c5b0b851980820676429ea6ebfa28f7}{consumidor} (\hyperlink{structAlphaStack}{Alpha\+Stack} $\ast$alpha, int $\ast$mutex, int $\ast$lleno, int $\ast$vacio, int cons\+Sleep)
\end{DoxyCompactItemize}


\subsection{Detailed Description}
fichero que contiene ej6 de la practica 3 de S\+O\+P\+ER para el problema productor consumidor 

\begin{DoxyAuthor}{Author}
Lucia Asencio y Rodrigo de Pool 
\end{DoxyAuthor}
\begin{DoxyDate}{Date}
16-\/3-\/2017 
\end{DoxyDate}


\subsection{Function Documentation}
\index{ejercicio6.\+c@{ejercicio6.\+c}!consumidor@{consumidor}}
\index{consumidor@{consumidor}!ejercicio6.\+c@{ejercicio6.\+c}}
\subsubsection[{\texorpdfstring{consumidor(\+Alpha\+Stack $\ast$alpha, int $\ast$mutex, int $\ast$lleno, int $\ast$vacio, int cons\+Sleep)}{consumidor(AlphaStack *alpha, int *mutex, int *lleno, int *vacio, int consSleep)}}]{\setlength{\rightskip}{0pt plus 5cm}int consumidor (
\begin{DoxyParamCaption}
\item[{{\bf Alpha\+Stack} $\ast$}]{alpha, }
\item[{int $\ast$}]{mutex, }
\item[{int $\ast$}]{lleno, }
\item[{int $\ast$}]{vacio, }
\item[{int}]{cons\+Sleep}
\end{DoxyParamCaption}
)}\hypertarget{ejercicio6_8c_a9c5b0b851980820676429ea6ebfa28f7}{}\label{ejercicio6_8c_a9c5b0b851980820676429ea6ebfa28f7}
Tras crear los semaforos necesarios, el proceso que ejecuta esta funcion consume, mientras haya productos disponibles, las letras del abecedario En caso de error, hara detach de la memoria pero no la borrara 
\begin{DoxyParams}{Parameters}
{\em alpha} & puntero a la estructura compartida \\
\hline
{\em mutex,lleno,vacio} & punteros a los semids \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
-\/1 en caso de error, else 0 
\end{DoxyReturn}
\index{ejercicio6.\+c@{ejercicio6.\+c}!crear\+\_\+sems@{crear\+\_\+sems}}
\index{crear\+\_\+sems@{crear\+\_\+sems}!ejercicio6.\+c@{ejercicio6.\+c}}
\subsubsection[{\texorpdfstring{crear\+\_\+sems(char $\ast$filekey, int $\ast$mutex, int $\ast$lleno, int $\ast$vacio)}{crear_sems(char *filekey, int *mutex, int *lleno, int *vacio)}}]{\setlength{\rightskip}{0pt plus 5cm}int crear\+\_\+sems (
\begin{DoxyParamCaption}
\item[{char $\ast$}]{filekey, }
\item[{int $\ast$}]{mutex, }
\item[{int $\ast$}]{lleno, }
\item[{int $\ast$}]{vacio}
\end{DoxyParamCaption}
)}\hypertarget{ejercicio6_8c_a2cc0837ae3ca446fb9b2ba73718c8fc9}{}\label{ejercicio6_8c_a2cc0837ae3ca446fb9b2ba73718c8fc9}
Solicita los 3 sems necesarios para el problema productor/consumidor Devuelve el identificador del semaforo en $\ast$mutex, $\ast$lleno, $\ast$vacio Los semaforos son inicializados\+: mutex a 1, lleno a 0, vacio a 26 
\begin{DoxyParams}{Parameters}
{\em filekey} & parametro para generar la clave con ftok. La key cambia para cada semaforo \\
\hline
{\em mutex,lleno,vacio} & punteros a los ints donde se guarda los sems id \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
0 si semaforos creados, -\/1 en caso de error (libera los semaforos ya creados si error) 
\end{DoxyReturn}
\index{ejercicio6.\+c@{ejercicio6.\+c}!crear\+\_\+shmem@{crear\+\_\+shmem}}
\index{crear\+\_\+shmem@{crear\+\_\+shmem}!ejercicio6.\+c@{ejercicio6.\+c}}
\subsubsection[{\texorpdfstring{crear\+\_\+shmem(char $\ast$filekey, int key, int size, Alpha\+Stack $\ast$$\ast$att)}{crear_shmem(char *filekey, int key, int size, AlphaStack **att)}}]{\setlength{\rightskip}{0pt plus 5cm}int crear\+\_\+shmem (
\begin{DoxyParamCaption}
\item[{char $\ast$}]{filekey, }
\item[{int}]{key, }
\item[{int}]{size, }
\item[{{\bf Alpha\+Stack} $\ast$$\ast$}]{att}
\end{DoxyParamCaption}
)}\hypertarget{ejercicio6_8c_ad25a83427215d376e79b326a4a5588ea}{}\label{ejercicio6_8c_ad25a83427215d376e79b326a4a5588ea}
Solicita zona de memoria compartida, primero con I\+P\+C\+\_\+\+C\+R\+E\+AT $\vert$ I\+P\+C\+\_\+\+E\+X\+CL y, si ya existe, de nuevo sin estas banderas. Also attaches the result to a struct Alpha\+Queue 
\begin{DoxyParams}{Parameters}
{\em filekey,key} & \+: parametros identicos a la funcion ftok \\
\hline
{\em size} & int $>$ 0, tamanio de la memoria a compartir \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
identifier for the shared mmemory, -\/1 in case of error 
\end{DoxyReturn}
\index{ejercicio6.\+c@{ejercicio6.\+c}!main@{main}}
\index{main@{main}!ejercicio6.\+c@{ejercicio6.\+c}}
\subsubsection[{\texorpdfstring{main(int argc, char $\ast$$\ast$argv)}{main(int argc, char **argv)}}]{\setlength{\rightskip}{0pt plus 5cm}int main (
\begin{DoxyParamCaption}
\item[{int}]{argc, }
\item[{char $\ast$$\ast$}]{argv}
\end{DoxyParamCaption}
)}\hypertarget{ejercicio6_8c_a3c04138a5bfe5d72780bb7e82a18e627}{}\label{ejercicio6_8c_a3c04138a5bfe5d72780bb7e82a18e627}
Main que, utilizando dos procesos hijos, simula los procesos productor y consumidor Pueden omitirse todos los argumentos (los argumentos por defecto son 1000,5000, 80000), omitirse el ultimo (por defecto, se usa 100000), o no omitirse ninguno. \begin{DoxyItemize}
\item argv\mbox{[}1\mbox{]} , n1, int $>$=0 que indica el usleep(n1) que ejecutara el padre entre produccion y produccion \item argv\mbox{[}2\mbox{]} , n2, int $>$=0 que indica el usleep(n2) que ejecutara el padre entre consumicion y consumicion \item argv\mbox{[}3\mbox{]} , n3, int $>$ 0 que indica el usleep(n3) que ejecutara el hijo temporizador antes de cortar la produccion/consumicion de los otros dos. \begin{DoxyReturn}{Returns}
0 si todo fue bien, -\/1 si error 
\end{DoxyReturn}
\end{DoxyItemize}
\index{ejercicio6.\+c@{ejercicio6.\+c}!productor@{productor}}
\index{productor@{productor}!ejercicio6.\+c@{ejercicio6.\+c}}
\subsubsection[{\texorpdfstring{productor(\+Alpha\+Stack $\ast$alpha, int $\ast$mutex, int $\ast$lleno, int $\ast$vacio, int prod\+Sleep)}{productor(AlphaStack *alpha, int *mutex, int *lleno, int *vacio, int prodSleep)}}]{\setlength{\rightskip}{0pt plus 5cm}int productor (
\begin{DoxyParamCaption}
\item[{{\bf Alpha\+Stack} $\ast$}]{alpha, }
\item[{int $\ast$}]{mutex, }
\item[{int $\ast$}]{lleno, }
\item[{int $\ast$}]{vacio, }
\item[{int}]{prod\+Sleep}
\end{DoxyParamCaption}
)}\hypertarget{ejercicio6_8c_acc4da934b99f2d1954f65e8a5ca87223}{}\label{ejercicio6_8c_acc4da934b99f2d1954f65e8a5ca87223}
Tras crear los semaforos necesarios, esta funcion produce una cola de letras mientras no este disponible todo el abecedario En caso de error, hara detach de la memoria pero no la borrara 
\begin{DoxyParams}{Parameters}
{\em alpha} & puntero a la estructura compartida \\
\hline
{\em mutex,lleno,vacio} & punteros a los semids \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
-\/1 en caso de error, else 0. 
\end{DoxyReturn}
